
#
# A simple broadcasting function example.
# This demonstrates how to declare and run a simple function.
#

function sayMessage(message: text):
    broadcast {_message} # our message argument is available in `{_message}`.

on first join:
    wait 1 second
    sayMessage("Welcome, %player%!") # Runs the `sayMessage` function.

#
# An example of a function with multiple parameters and a return type.
# This demonstrates how to return a value and use it.
#

function giveApple(name: text, amount: number) :: item:
    set {_item} to an apple
    set the name of {_item} to {_name}
    set the item amount of {_item} to {_amount}
    return {_item} # Gives this value to the code that called the function.

command /appleexample:
    permission: skript.example.apple
    trigger:
        send "Giving you an apple!"
        set {_item} to giveApple("Banana", 4)
        give player {_item}

#
# An example of a recursive (self-calling) function that is used to repeat a complex task.
# Please note that self-calling functions can loop infinitely, so use with caution.
#

function destroyOre(source: block) :: blocks:
    add {_source} to {_found::*}
    break {_source} naturally using an iron pickaxe
    loop blocks in radius 1 of {_source}:
        loop-block is any ore
        break loop-block naturally using an iron pickaxe
        if {_found::*} does not contain loop-block:
            add destroyOre(loop-block) to {_found::*}
    return {_found::*}

command /oreexample:
    permission: skript.example.ore
    trigger:
        if player's target block is any ore:
            send "Destroying all connected ore."
            set {_found::*} to destroyOre(player's target block)
            send "Destroyed %size of {_found::*}% connected ores!"
        else:
            send "<red>You must be looking at an ore block!"
